// (c) IMT - Information Management Technology AG, CH-9470 Buchs, www.imt.ch.
// SW guideline: Technote Coding Guidelines Version. 1.6
//
// Generated by DffGenerator (Version 1.00.0)
// Generated from LedHeartbeatAP.dff

// AUTO-GENERATED FILE. DO NOT MODIFY.

#include "LedHeartbeatAP.h"

// Imt.Base includes.
#include <Imt.Base.Core.Diagnostics/Diagnostics.h>


// Default Constructor.
LedHeartbeatAP::LedHeartbeatAP(void) :
    ActivePartAbs(RuntimePriority::Prio_16, ExecutableConfiguration("LedHeartbeatAP")),
    m_heartBeatTimerTimer(*this, HEART_BEAT_TIMER_TIMER_INTERVAL_MS),
    m_handler(*this)
{
    // Nothing to do.
}

// Destructor.
LedHeartbeatAP::~LedHeartbeatAP(void) {
    // Nothing to do.
}

// Process a message, run to completion.
// @see ExecutableIfc::execute
//
// Supported protocols:
//     ButtonPressEventProtocol
void LedHeartbeatAP::execute(const uint16_t protocolIdentifier, Deserializer& deserializer) {
    switch(protocolIdentifier) {
        case RuntimeProtocolIdentifiers::TIMER: {
                RuntimeTimerEvent timerEventArgs(deserializer);
                handleTimer(timerEventArgs);
            }
            break;
        case ProtocolIdentifier::BUTTON_PRESS_EVENT: {
                ButtonPressEventProtocol message(deserializer);
                m_handler.handleButtonPressEvent(message);
            }
            break;
        default:
            // Ignore all other protocols
            ASSERT_DEBUG1(false, "Unknown protocol in LedHeartbeatAP.");
            break;
    }
}

PeriodicTimer& LedHeartbeatAP::getHeartBeatTimerTimer(void) {
    return m_heartBeatTimerTimer; //lint !e1536 // Exposing low access member // Justification: Required for handler implementation
}

// see ActivePartAbs.
void LedHeartbeatAP::onInitialize(void) {
    m_handler.onInitialize();
}

// See ActivePartAbs.
void LedHeartbeatAP::onStart(void) {
    m_handler.onStart();
}

// TimerSpec handler.
void LedHeartbeatAP::handleTimer(const RuntimeTimerEvent& timerEvent) {
    if (timerEvent.isEqual(m_heartBeatTimerTimer.getTimerId())) {
        m_handler.handleHeartBeatTimerTimer();
    }
    else {
        // No matching timer - it has been already killed by handler.
    }
}
