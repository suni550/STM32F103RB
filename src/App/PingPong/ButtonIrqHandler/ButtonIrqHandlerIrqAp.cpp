// (c) IMT - Information Management Technology AG, CH-9470 Buchs, www.imt.ch.
// SW guideline: Technote Coding Guidelines Version. 1.6
//
// Generated by DffGenerator (Version 1.00.0)
// Generated from ButtonIrqHandlerIRQAP.dff

// AUTO-GENERATED FILE. DO NOT MODIFY.

#include "ButtonIrqHandlerIrqAP.h"
#include "..\..\..\..\..\..\STM32F103MD.Ping.Pong\ApplicationHardwareConfig.h"

// Imt.Base includes.
#include <Imt.Base.Dff.Runtime/RuntimeInterrupts.h>
#include <Imt.Base.HAL.STM32F103MD/SystemPeripherals_NVIC.h>
#include <Imt.Base.HAL.STM32F103MD/SystemPeripherals_EXTI.h>
#include <Imt.Base.HAL.STM32F103MD/SystemPeripherals_USART.h>
#include <Imt.Base.HAL.STM32F103MD/SystemPeripherals_TIM.h>
ButtonIrqHandlerIrqAP ButtonIrqHandlerIrqAP::Instance; //lint !e956 // Non const, non volatile static or external variable // Justification: Required for IRQ implementation

void ButtonIrqHandlerIrqAP::initialize(void) {
    m_handler.onInitialize();
}

void ButtonIrqHandlerIrqAP::start(void) {
    m_handler.onStart();
}

void ButtonIrqHandlerIrqAP::handleInterrupt(void) {
    m_handler.onInterrupt();
}

void ButtonIrqHandlerIrqAP::sendButtonPressEventToButtonPress(const ButtonPressEventProtocol& message) {
    PortOutButtonPress.write(message.IDENTIFIER, &message);
}

// Default Constructor.
ButtonIrqHandlerIrqAP::ButtonIrqHandlerIrqAP(void) :
    PortOutButtonPress(),
    m_handler(*this)
{
    // Nothing to do.
}

// Destructor.
ButtonIrqHandlerIrqAP::~ButtonIrqHandlerIrqAP(void) {
    // Nothing to do.
}

extern "C" void EXTI15_10_IRQHandler(void){
    unsigned char data = 0xDD;
    // Notify runtime about application ISR entry
    EXTI_ClearITPendingBit(EXTI_Line13);
    RuntimeInterrupts::applicationIsrEntry();
   
    if(R_USER_BUTTON_B1 == 0x0u) {
        ButtonIrqHandlerIrqAP::Instance.handleInterrupt();
        if(USART_IsTransmitDataRegisterEmpty(USART_ModuleAddress_USART2)) {
            USART_SendData(USART_ModuleAddress_USART2, data); 
        }
    }
    // Notify runtime about application ISR exit
    RuntimeInterrupts::applicationIsrExit();
}
extern "C" void USART2_IRQHandler(void) {
    uint8_t data;
    RuntimeInterrupts::applicationIsrEntry();
   /*
    while(!USART_IsTransmitDataRegisterEmpty(USART_ModuleAddress_USART2)){};
     USART_SendData(USART_ModuleAddress_USART2, 0x55); */
    if(USART_IsReadDataRegisterNotEmpty(USART_ModuleAddress_USART2)) {
        data = USART_ReceiveData(USART_ModuleAddress_USART2);
    }
    RuntimeInterrupts::applicationIsrExit();
}
extern "C" void TIM2_IRQHandler(void) { 
  
    TIM_ClearPendingInterrupt(TIM_ModuleAddress_TIM2, TIM_IrqFlag_UpdateInterrupt);
}