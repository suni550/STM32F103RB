// (c) IMT - Information Management Technology AG, CH-9470 Buchs, www.imt.ch.
// SW guideline: Technote Coding Guidelines Version. 1.6
//
// Generated by DffGenerator (Version 1.00.0)
// Generated from ButtonIrqHandlerIRQAP.dff

// AUTO-GENERATED FILE. DO NOT MODIFY.

#ifndef BUTTONIRQHANDLERIRQAP_H
#define BUTTONIRQHANDLERIRQAP_H

// Imt.Base includes.
// Platform.h must be very first include.
#include <Imt.Base.Core.Platform/Platform.h>
#include <Imt.Base.Dff.ActiveParts/ActivePartAbs.h>
#include <Imt.Base.Dff.ActiveParts/PortOutput.h>
#include <Imt.Base.Dff.Runtime/RuntimeProtocolIdentifiers.h>
#include <Imt.Base.Dff.Runtime/RuntimeTimerEvent.h>

// Project includes.
#include "ButtonIrqHandlerIrqAPHandler.h"
#include "ButtonIrqHandlerIrqAPIfc.h"
//#include "PingPongDff/ProtocolIdentifier.h"
#include "ProtocolIdentifier.h"
#include "protocols/ButtonPressEventProtocol.h"

namespace pingPongDff {
namespace pingPong {
namespace buttonIrqHandler {

class ButtonIrqHandlerIrqAP : public ButtonIrqHandlerIrqAPIfc {

public:

    // The static instance of the interrupt active part used from the interrupt callback function
    static ButtonIrqHandlerIrqAP Instance;
    PortOutput PortOutButtonPress;

    // Initialize the interrupt active part.
    void initialize(void);

    // Start the interrupt active part.
    void start(void);

    // Called whenever an interrupt occurs.
    void handleInterrupt(void);
    virtual void sendButtonPressEventToButtonPress(const ButtonPressEventProtocol& message);

private:

    /**
     * Default Constructor.
     */
    ButtonIrqHandlerIrqAP(void);

    /**
     * Destructor.
     */
    virtual ~ButtonIrqHandlerIrqAP(void);

    /**
     * Copy Constructor.
     */
    ButtonIrqHandlerIrqAP(const ButtonIrqHandlerIrqAP& other);

    /**
     * Assignment operator.
     */
    ButtonIrqHandlerIrqAP& operator=(const ButtonIrqHandlerIrqAP& other);

    /**
     * ActivePart handler.
     */
    ButtonIrqHandlerIrqAPHandler m_handler;
};

} // namespace buttonIrqHandler
} // namespace pingPong
} // namespace pingPongDff
using pingPongDff::pingPong::buttonIrqHandler::ButtonIrqHandlerIrqAP;
#endif // #ifndef BUTTONIRQHANDLERIRQAP_H
