// (c) IMT - Information Management Technology AG, CH-9470 Buchs, www.imt.ch.
// SW guideline: Technote Coding Guidelines Version. 1.6
//
// Generated by DffGenerator (Version 1.00.0)
// Generated from ButtonPressEventProtocol.dff

// AUTO-GENERATED FILE. DO NOT MODIFY.

#include "ButtonPressEventProtocol.h"

// Default Constructor.
ButtonPressEventProtocol::ButtonPressEventProtocol(void) :
    m_IsButtonPressed(false)
{
    // Nothing to do.
}

// Custom Constructor.
ButtonPressEventProtocol::ButtonPressEventProtocol(const bool IsButtonPressed) :
    m_IsButtonPressed(IsButtonPressed)
{
    // Nothing to do.
}

// Copy constructor.
ButtonPressEventProtocol::ButtonPressEventProtocol(const ButtonPressEventProtocol& other) :
    m_IsButtonPressed(other.m_IsButtonPressed)
{
    // Nothing to do.
}

// Constructor from deserializer.
ButtonPressEventProtocol::ButtonPressEventProtocol(Deserializer& deserializer) :
    m_IsButtonPressed(false)
{
    ButtonPressEventProtocol::deserialize(deserializer);
}

// Destructor.
ButtonPressEventProtocol::~ButtonPressEventProtocol(void) {
    // Nothing to do.
}

// Assignment operator.
ButtonPressEventProtocol& ButtonPressEventProtocol::operator=(const ButtonPressEventProtocol& other) {
    if (&other == this) {
        return *this;
    }
    m_IsButtonPressed = other.m_IsButtonPressed;
    return *this;
}

// Equality operator.
//lint -save
//lint -estring(1960, *side effects on right hand of logical operator*) // MISRA C++ 2008 Required Rule 5-14-1 // Justification: No side effects
bool ButtonPressEventProtocol::operator==(const ButtonPressEventProtocol& right) const {
    return (this->m_IsButtonPressed == right.m_IsButtonPressed);
}
//lint -restore

// Inequality operator.
bool ButtonPressEventProtocol::operator!=(const ButtonPressEventProtocol& right) const {
    return !(*this == right);
}

// @see SerializableIfc
void ButtonPressEventProtocol::deserialize(Deserializer& deserializer) {
    deserializer >> m_IsButtonPressed;
}

// @see SerializableIfc
void ButtonPressEventProtocol::serialize(Serializer& serializer) const {
    serializer << m_IsButtonPressed;
}

void ButtonPressEventProtocol::setIsButtonPressed(const bool IsButtonPressed) {
    m_IsButtonPressed = IsButtonPressed;
}

bool ButtonPressEventProtocol::getIsButtonPressed(void) const {
    return m_IsButtonPressed;
}
