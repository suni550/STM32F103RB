// (c) IMT - Information Management Technology AG, CH-9470 Buchs, www.imt.ch.
// SW guideline: Technote Coding Guidelines Version. 1.6
//
// Generated by DffGenerator (Version 1.00.0)
// Generated from TokenEventProtocol.dff

// AUTO-GENERATED FILE. DO NOT MODIFY.

// Imt.Base includes.
// Platform.h must be very first include.
#include <Imt.Base.Core.Platform/Platform.h>
#include <Imt.Base.Dff.ActiveParts.Test/EventArgsSerializer.h>

// Class under test.
#include "protocols/TokenEventProtocol.h"

// Diagnostics.h must be last include.
#include <Imt.Base.Core.Diagnostics/Diagnostics.h>

using namespace System;
using namespace System::Text;
using namespace System::Collections::Generic;
using namespace Microsoft::VisualStudio::TestTools::UnitTesting;

namespace unitTestPingPongDff {

constexpr uint32_t defaultTokenCounter{ 0U };

constexpr uint32_t expectedTokenCounter{ 1840700269U };

/**
 * Tests the TokenEventProtocol.
 */
[TestClass]
public ref class TestTokenEventProtocol {

public:

    [TestInitialize()]
    void setUp() {
        m_pTestMessage = new TokenEventProtocol();
        m_pTestMessage->setTokenCounter(expectedTokenCounter);
    }

    [TestCleanup()]
    void tearDown() {
        delete m_pTestMessage;
        m_pTestMessage = NULL;
    }

    [TestMethod]
    [TestCategory("Software Unit")]
    [Description("The value of MAX_SERIALIZED_SIZE_BYTES is correct")]
    void testTokenEventProtocol_maxSerializedSize() {
        // Arrange
        TokenEventProtocol message(*m_pTestMessage);
        constexpr size_t bufferSize = sizeof(TokenEventProtocol);
        uint8_t buffer[bufferSize];
        // Act
        Serializer serializer(buffer, bufferSize);
        message.serialize(serializer);
        // Assert
        Assert::AreEqual(message.MAX_SERIALIZED_SIZE_BYTES, serializer.getBufferPos());
    }

    [TestMethod]
    [TestCategory("Software Unit")]
    [Description("All fields are initialized to the correct default value")]
    void testTokenEventProtocol_defaultConstructor() {
        // Act
        TokenEventProtocol message;
        // Assert
        assertIsDefault(message);
    }

    [TestMethod]
    [TestCategory("Software Unit")]
    [Description("All fields are initialized to the given value")]
    void testTokenEventProtocol_customConstructor() {
        // Act
        TokenEventProtocol message(
            expectedTokenCounter);

        // Assert
        assertIsAsExpected(message);
    }

    [TestMethod]
    [TestCategory("Software Unit")]
    [Description("All fields are initialized to the correct value from the input message")]
    void testTokenEventProtocol_copyConstructor() {
        // Act
        TokenEventProtocol message(*m_pTestMessage);
        // Assert
        assertIsAsExpected(message);
    }

    [TestMethod]
    [TestCategory("Software Unit")]
    [Description("All fields are set to the correct value from the input message")]
    void testTokenEventProtocol_assignmentOperator() {
        // Arrange
        TokenEventProtocol message;
        // Act
        assertIsDefault(message);
        message = *m_pTestMessage;
        // Assert
        assertIsAsExpected(message);
    }

    [TestMethod]
    [TestCategory("Software Unit")]
    [Description("All fields are set to the correct value from the input message")]
    void testTokenEventProtocol_assignmentOperator_assignSelf() {
        // Arrange
        TokenEventProtocol message(*m_pTestMessage);
        // Act
        message = message;
        // Assert
        assertIsAsExpected(message);
    }

    [TestMethod]
    [TestCategory("Software Unit")]
    [Description("The compare operators == and != works as expected")]
    void testTokenEventProtocol_compareOperators() {
        // Arrange
        TokenEventProtocol message(*m_pTestMessage);
        TokenEventProtocol messageEqual(*m_pTestMessage);

        TokenEventProtocol messageDiff1(*m_pTestMessage);
        messageDiff1.setTokenCounter(defaultTokenCounter);

        // Act / assert
        // equality
        Assert::IsTrue(message == message);
        Assert::IsTrue(message == messageEqual);
        Assert::IsTrue(messageEqual == message);
        Assert::IsFalse(message == messageDiff1);
        // inequality
        Assert::IsFalse(message != message);
        Assert::IsFalse(message != messageEqual);
        Assert::IsFalse(messageEqual != message);
        Assert::IsTrue(message != messageDiff1);
    }

    [TestMethod]
    [TestCategory("Software Unit")]
    [Description("When serializing and deserializing the message remains the same")]
    void testTokenEventProtocol_serialize_deserialize() {
        // Arrange
        TokenEventProtocol inputMessage(*m_pTestMessage);
        constexpr size_t bufferSize = sizeof(TokenEventProtocol);
        uint8_t buffer[bufferSize];
        // Act
        Serializer serializer(buffer, bufferSize);
        inputMessage.serialize(serializer);
        Deserializer deserializer(buffer, bufferSize);
        TokenEventProtocol deserializedMessage(deserializer);
        // Assert
        assertIsAsExpected(deserializedMessage);
    }

    [TestMethod]
    [TestCategory("Software Unit")]
    [Description("The field 'TokenCounter' get and set methods work as expected")]
    void testTokenEventProtocol_field_TokenCounter() {
        // Arrange
        TokenEventProtocol message1;
        TokenEventProtocol message2;
        uint32_t expected1 = 0U;
        uint32_t expected2 = 4294967295U;

        // Act
        message1.setTokenCounter(expected1);
        message2.setTokenCounter(expected2);

        // Assert
        Assert::AreEqual(expected1, message1.getTokenCounter());
        Assert::AreEqual(expected2, message2.getTokenCounter());
    }

private:

    void assertIsAsExpected(const TokenEventProtocol& message) {
        // TokenCounter
        Assert::AreEqual(expectedTokenCounter, message.getTokenCounter());
    }

    void assertIsDefault(const TokenEventProtocol& message) {
        // TokenCounter
        Assert::AreEqual(defaultTokenCounter, message.getTokenCounter());
    }

    TokenEventProtocol* m_pTestMessage;
};

} // namespace unitTestPingPongDff
